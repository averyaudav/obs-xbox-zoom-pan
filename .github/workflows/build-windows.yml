name: Build OBS Plugin (Windows)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install CMake + Ninja
        uses: lukka/get-cmake@v3.30.3

      # Robust: scan recent releases for the newest win64-deps zip
      - name: Download OBS deps (win64)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $releases = Invoke-RestMethod `
            -Headers @{ "Authorization" = "Bearer $env:GH_TOKEN"; "User-Agent"="obs-xbox-zoom-pan-ci" } `
            https://api.github.com/repos/obsproject/obs-deps/releases?per_page=20

          $asset = $null
          foreach ($rel in $releases) {
            $cand = $rel.assets | Where-Object { $_.name -like 'win64-deps-*.zip' } | Select-Object -First 1
            if ($cand) { $asset = $cand; break }
          }
          if (-not $asset) { throw "No win64-deps asset found across recent releases." }

          Write-Host "Using obs-deps asset:" $asset.name
          $zip = "$env:RUNNER_TEMP\obs-deps.zip"
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zip

          New-Item -ItemType Directory -Force -Path C:\obs-deps | Out-Null
          Expand-Archive -Path $zip -DestinationPath C:\obs-deps -Force
          Write-Host "`n== obs-deps tree =="
          Get-ChildItem -Recurse -Depth 2 C:\obs-deps | Select-Object FullName

      - name: Configure (Ninja, verbose)
        shell: pwsh
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_VERBOSE_MAKEFILE=ON
          -DCMAKE_PREFIX_PATH="C:\obs-deps;C:\obs-deps\lib\cmake"
          -Dlibobs_DIR="C:\obs-deps\lib\cmake\libobs"
          -Dobs-frontend-api_DIR="C:\obs-deps\lib\cmake\obs-frontend-api"
          --debug-find

      - name: Build
        run: cmake --build build --config Release -j

      - name: Install to staging
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\stage"

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-xbox-zoom-pan-windows
          path: stage/obs-plugins/64bit/obs-xbox-zoom-pan.dll
          if-no-files-found: warn

      - name: Upload build dir and logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-and-logs
          path: |
            build/**
            stage/**
          if-no-files-found: ignore
