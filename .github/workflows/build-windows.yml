name: Build OBS Plugin (Windows)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@v3.30.3

      # ----------------------------------------------------
      # 1) Download OBS CMake SDK and Qt6 deps by scanning recent releases
      # ----------------------------------------------------
      - name: Download OBS SDK (windows-cmake) + Qt6 deps
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'

          function Get-Asset([string]$repo, [string]$pattern) {
            $rels = Invoke-RestMethod `
              -Headers @{ "Authorization"="Bearer $env:GH_TOKEN"; "User-Agent"="obs-xbox-zoom-pan-ci" } `
              "https://api.github.com/repos/$repo/releases?per_page=30"
            foreach ($r in $rels) {
              $cand = $r.assets | Where-Object { $_.name -like $pattern } | Select-Object -First 1
              if ($cand) { return $cand }
            }
            throw "No asset matched pattern '$pattern' in repo $repo"
          }

          # OBS SDK containing libobs/obs-frontend-api CMake configs
          $sdk = Get-Asset 'obsproject/obs-studio' 'windows-cmake*.zip'
          Write-Host "OBS SDK asset: $($sdk.name)"

          # Qt6 deps for Windows x64
          $qt = Get-Asset 'obsproject/obs-deps' 'windows-deps-qt6-*-x64.zip'
          Write-Host "Qt6 deps asset: $($qt.name)"

          $sdkZip = "$env:RUNNER_TEMP\obs-sdk.zip"
          $qtZip  = "$env:RUNNER_TEMP\qt6.zip"
          Invoke-WebRequest $sdk.browser_download_url -OutFile $sdkZip
          Invoke-WebRequest $qt.browser_download_url  -OutFile $qtZip

          $sdkDir = "C:\obs-sdk"
          $qtDir  = "C:\obs-qt6"
          New-Item -ItemType Directory -Force -Path $sdkDir, $qtDir | Out-Null
          Expand-Archive -Path $sdkZip -DestinationPath $sdkDir -Force
          Expand-Archive -Path $qtZip  -DestinationPath $qtDir -Force

          Write-Host "`n== SDK cmake =="
          Get-ChildItem -Recurse -Depth 2 "$sdkDir\cmake" | Select-Object FullName
          if (-not (Test-Path "$sdkDir\cmake\libobs\libobsConfig.cmake")) {
            throw "libobsConfig.cmake not found in $sdkDir\cmake (SDK asset layout changed?)"
          }

          Write-Host "`n== Qt6 cmake =="
          Get-ChildItem "$qtDir\lib\cmake"

          # Expose for later steps
          echo "SDK_CMAKE=$sdkDir\cmake" >> $env:GITHUB_ENV
          echo "QT6_CMAKE=$qtDir\lib\cmake" >> $env:GITHUB_ENV

      # ----------------------------------------------------
      # 2) Configure your plugin (MSVC generator)
      # ----------------------------------------------------
      - name: Configure (Visual Studio 2022, x64)
        shell: pwsh
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_PREFIX_PATH="$env:SDK_CMAKE;$env:QT6_CMAKE"

      # ----------------------------------------------------
      # 3) Build
      # ----------------------------------------------------
      - name: Build
        run: cmake --build build --config Release

      # ----------------------------------------------------
      # 4) Stage install
      # ----------------------------------------------------
      - name: Install to staging
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\stage"

      # ----------------------------------------------------
      # 5) Upload DLL artifact
      # ----------------------------------------------------
      - name: Upload plugin DLL
        uses: actions/upload-artifact@v4
        with:
          name: obs-xbox-zoom-pan-windows
          path: stage/obs-plugins/64bit/obs-xbox-zoom-pan.dll
          if-no-files-found: warn

      # ----------------------------------------------------
      # 6) Always upload logs/build for troubleshooting
      # ----------------------------------------------------
      - name: Upload build dir + logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-and-logs
          path: |
            build/**
            stage/**
          if-no-files-found: ignore


