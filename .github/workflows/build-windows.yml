name: Build OBS Plugin (Windows)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout plugin repo
        uses: actions/checkout@v4

      - name: Install CMake + Ninja
        uses: lukka/get-cmake@v3.30.3

      # ---------------------------------------------
      # 1) Grab latest obs-deps zips (core + Qt6)
      # ---------------------------------------------
      - name: Download obs-deps (core + Qt6)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'

          function Get-ObsDepsAsset([string]$pattern) {
            # scan recent releases to avoid "latest" pointing to tag without assets
            $rels = Invoke-RestMethod `
              -Headers @{ "Authorization"="Bearer $env:GH_TOKEN"; "User-Agent"="obs-xbox-zoom-pan-ci" } `
              https://api.github.com/repos/obsproject/obs-deps/releases?per_page=25
            foreach ($r in $rels) {
              $cand = $r.assets | Where-Object { $_.name -like $pattern } | Select-Object -First 1
              if ($cand) { return $cand }
            }
            throw "No asset matched: $pattern"
          }

          $core = Get-ObsDepsAsset 'windows-deps-*-x64.zip'          # libav, other deps for obs
          $qt6  = Get-ObsDepsAsset 'windows-deps-qt6-*-x64.zip'      # Qt 6 for UI

          Write-Host "Core deps: $($core.name)"
          Write-Host "Qt6  deps: $($qt6.name)"

          $coreZip = "$env:RUNNER_TEMP\core.zip"
          $qtZip   = "$env:RUNNER_TEMP\qt6.zip"
          Invoke-WebRequest $core.browser_download_url -OutFile $coreZip
          Invoke-WebRequest $qt6.browser_download_url  -OutFile $qtZip

          New-Item -ItemType Directory -Force -Path C:\obs-core | Out-Null
          New-Item -ItemType Directory -Force -Path C:\obs-qt6  | Out-Null
          Expand-Archive -Path $coreZip -DestinationPath C:\obs-core -Force
          Expand-Archive -Path $qtZip  -DestinationPath C:\obs-qt6  -Force

          Write-Host "`n== obs-core cmake packages ==" ; Get-ChildItem C:\obs-core\lib\cmake
          Write-Host "`n== obs-qt6  cmake packages ==" ; Get-ChildItem C:\obs-qt6\lib\cmake

      # ---------------------------------------------
      # 2) Build a minimal OBS SDK (libobs + frontend)
      # ---------------------------------------------
      - name: Fetch obs-studio source
        run: git clone --depth 1 https://github.com/obsproject/obs-studio.git

      - name: Configure obs-studio (minimal, Ninja)
        shell: pwsh
        run: >
          cmake -S obs-studio -B obs-build -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\obs-sdk"
          -DCMAKE_PREFIX_PATH="C:\obs-core\lib\cmake;C:\obs-qt6\lib\cmake"
          -DBUILD_BROWSER=OFF
          -DBUILD_VLC=OFF
          -DBUILD_VST=OFF
          -DBUILD_QSV=OFF
          -DBUILD_TESTS=OFF
          -DENABLE_SCRIPTING=OFF
          -DENABLE_HEVC=OFF

      - name: Build + install obs-studio SDK (libobs + frontend)
        shell: pwsh
        run: |
          cmake --build obs-build --config Release --target libobs obs-frontend-api -j
          cmake --build obs-build --config Release --target install

          Write-Host "`n== Installed SDK cmake dir =="
          Get-ChildItem -Recurse "${{ github.workspace }}\obs-sdk\cmake"

      # ---------------------------------------------
      # 3) Build your plugin against the installed SDK
      # ---------------------------------------------
      - name: Configure plugin (Ninja, verbose)
        shell: pwsh
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_VERBOSE_MAKEFILE=ON
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}\obs-sdk\cmake;C:\obs-qt6\lib\cmake"
          --debug-find

      - name: Build plugin
        run: cmake --build build --config Release -j

      - name: Stage install
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\stage"

      - name: Upload plugin DLL
        uses: actions/upload-artifact@v4
        with:
          name: obs-xbox-zoom-pan-windows
          path: stage/obs-plugins/64bit/obs-xbox-zoom-pan.dll
          if-no-files-found: warn

      - name: Upload build dirs + logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-and-logs
          path: |
            obs-build/**
            build/**
            stage/**
          if-no-files-found: ignore


